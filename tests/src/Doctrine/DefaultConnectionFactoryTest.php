<?php

namespace Fabiang\Common\SwitchDatabase\Doctrine;

use PHPUnit\Framework\TestCase;
use Interop\Container\ContainerInterface;
use stdClass;
use Doctrine\DBAL\Driver\Connection;
use DateTime;
use Prophecy\PhpUnit\ProphecyTrait;
use Fabiang\Common\SwitchDatabase\Doctrine\Exception\RuntimeException;
use Fabiang\Common\SwitchDatabase\Doctrine\Exception\UnexpectedValueException;
use Fabiang\Common\SwitchDatabase\Doctrine\Exception\BadMethodCallException;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-12-09 at 13:40:54.
 *
 * @coversDefaultClass Fabiang\Common\SwitchDatabase\Doctrine\DefaultConnectionFactory
 */
final class DefaultConnectionFactoryTest extends TestCase
{

    use ProphecyTrait;

    /**
     * @var DefaultConnectionFactory
     */
    private $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->object = new DefaultConnectionFactory;
    }

    protected function tearDown(): void
    {
        putenv('DOCTRINE_CONNECTION=');
    }

    /**
     * @covers ::__invoke
     * @covers ::getConnection
     */
    public function testInvoke()
    {
        $container = $this->prophesize(ContainerInterface::class);
        $container->get('config')->willReturn([
            'switch-database' => [
                'connection_mapping' => [
                    'foo' => 'baz',
                ],
                'session_service'    => [
                    'name' => 'session_test',
                    'key'  => [
                        'name' => 'test',
                        'type' => 'property',
                    ]
                ]
            ]
        ]);

        $session       = new stdClass();
        $session->test = 'foo';

        $container->get('session_test')->willReturn($session);

        $connection = $this->prophesize(Connection::class)->reveal();
        $container->get('doctrine.connection.baz')->shouldBeCalled()
            ->willReturn($connection);

        $this->assertSame($connection, $this->object->__invoke($container->reveal(), null));
    }

    /**
     * @covers ::__invoke
     * @covers ::getConnection
     */
    public function testInvokeDefault()
    {
        $container = $this->prophesize(ContainerInterface::class);
        $container->get('config')->willReturn([
            'switch-database' => [
                'connection_mapping' => [
                    'foo' => 'baz',
                ],
                'default_connection' => 'baz',
                'session_service'    => [
                    'name' => 'session_test',
                    'key'  => [
                        'name' => 'test',
                        'type' => 'property',
                    ]
                ]
            ]
        ]);

        $session = new stdClass();

        $container->get('session_test')->willReturn($session);

        $connection = $this->prophesize(Connection::class)->reveal();
        $container->get('doctrine.connection.baz')->shouldBeCalled()
            ->willReturn($connection);

        $this->assertSame($connection, $this->object->__invoke($container->reveal(), null));
    }

    /**
     * @covers ::__invoke
     * @covers ::getConnection
     */
    public function testInvokeEnvironment()
    {
        putenv('DOCTRINE_CONNECTION=moo');

        $container = $this->prophesize(ContainerInterface::class);
        $container->get('config')->willReturn([
            'switch-database' => [
                'connection_mapping' => [
                    'foo' => 'baz',
                    'moo' => 'bla',
                ],
                'default_connection' => 'baz',
                'session_service'    => [
                    'name' => 'session_test',
                    'key'  => [
                        'name' => 'test',
                        'type' => 'property',
                    ]
                ]
            ]
        ]);

        $session       = new stdClass();
        $session->test = 'foo';

        $container->get('session_test')->willReturn($session);

        $connection = $this->prophesize(Connection::class)->reveal();
        $container->get('doctrine.connection.moo')->shouldBeCalled()
            ->willReturn($connection);

        $this->assertSame($connection, $this->object->__invoke($container->reveal(), null));
    }

    /**
     * @covers ::__invoke
     * @covers ::getConnection
     */
    public function testInvokeWithMethod()
    {
        $container = $this->prophesize(ContainerInterface::class);
        $container->get('config')->willReturn([
            'switch-database' => [
                'connection_mapping' => [
                    '1481241600' => 'baz',
                ],
                'session_service'    => [
                    'name' => 'session_test',
                    'key'  => [
                        'name' => 'getTimestamp',
                        'type' => 'method',
                    ]
                ]
            ]
        ]);

        $session = new DateTime('2016-12-09');

        $container->get('session_test')->willReturn($session);

        $connection = $this->prophesize(Connection::class)->reveal();
        $container->get('doctrine.connection.baz')->shouldBeCalled()
            ->willReturn($connection);

        $this->assertSame($connection, $this->object->__invoke($container->reveal(), null));
    }

    /**
     * @covers ::__invoke
     * @covers ::getConnection
     * @expectedException
     */
    public function testInvokeWithUnknownMethod()
    {
        $this->expectException(RuntimeException::class);

        $container = $this->prophesize(ContainerInterface::class);
        $container->get('config')->willReturn([
            'switch-database' => [
                'connection_mapping' => [],
                'session_service'    => [
                    'name' => 'session_test',
                    'key'  => [
                        'name' => 'getUndefined',
                        'type' => 'method',
                    ]
                ]
            ]
        ]);

        $session = new DateTime('2016-12-09');

        $container->get('session_test')->willReturn($session);
        $this->object->__invoke($container->reveal(), null);
    }

    /**
     * @covers ::__invoke
     * @covers ::getConnection
     */
    public function testInvokeWithUnknownType()
    {
        $this->expectException(UnexpectedValueException::class);

        $container = $this->prophesize(ContainerInterface::class);
        $container->get('config')->willReturn([
            'switch-database' => [
                'connection_mapping' => [],
                'session_service'    => [
                    'name' => 'session_test',
                    'key'  => [
                        'name' => 'foo',
                        'type' => 'unknown',
                    ]
                ]
            ]
        ]);

        $session = new stdClass;
        $container->get('session_test')->willReturn($session);
        $this->object->__invoke($container->reveal(), null);
    }

    /**
     * @covers ::__invoke
     * @covers ::getConnection
     */
    public function testInvokeNoObject()
    {
        $this->expectException(BadMethodCallException::class);

        $container = $this->prophesize(ContainerInterface::class);
        $container->get('config')->willReturn([
            'switch-database' => [
                'connection_mapping' => [],
                'session_service'    => [
                    'name' => 'session_test',
                    'key'  => [],
                ]
            ]
        ]);

        $container->get('session_test')->willReturn(1);
        $this->object->__invoke($container->reveal(), null);
    }

}
